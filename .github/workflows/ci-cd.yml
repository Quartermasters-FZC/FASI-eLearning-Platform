# =================================================================
# CI/CD Pipeline for AI-Powered eLearning Platform
# Quartermasters FZC - Production Deployment Workflow
# =================================================================

name: "Build, Test, and Deploy"

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

env:
  # AWS Configuration
  AWS_REGION: us-east-1
  EKS_CLUSTER_NAME: quartermasters-elearning-production-cluster
  
  # Container Registry
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
  
  # Application Configuration
  NODE_VERSION: "18"
  PYTHON_VERSION: "3.11"
  
  # Security Scanning
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

# =================================================================
# JOBS
# =================================================================

jobs:
  # =================================================================
  # CODE QUALITY AND SECURITY CHECKS
  # =================================================================
  
  security-scan:
    name: "Security Scan"
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          # Backend dependencies
          cd backend/auth-service && npm ci
          cd ../user-service && npm ci
          cd ../content-service && npm ci
          cd ../../frontend/web-app && npm ci
          
          # AI services dependencies
          cd ../../ai-services/speech-recognition && pip install -r requirements.txt
          cd ../nlp-service && pip install -r requirements.txt
          cd ../translation-service && pip install -r requirements.txt
      
      - name: Run Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ env.SNYK_TOKEN }}
        with:
          args: --all-projects --severity-threshold=medium
      
      - name: Upload Snyk results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif
      
      - name: Run Semgrep Security Scan
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/javascript
            p/typescript
            p/python
      
      - name: Run GitLeaks Secret Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # =================================================================
  # UNIT AND INTEGRATION TESTS
  # =================================================================
  
  test-backend:
    name: "Backend Tests"
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_elearning
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    strategy:
      matrix:
        service: [auth-service, user-service, content-service]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'backend/${{ matrix.service }}/package-lock.json'
      
      - name: Install dependencies
        run: |
          cd backend/${{ matrix.service }}
          npm ci
      
      - name: Run ESLint
        run: |
          cd backend/${{ matrix.service }}
          npm run lint
      
      - name: Run TypeScript checks
        run: |
          cd backend/${{ matrix.service }}
          npm run type-check
      
      - name: Run unit tests
        run: |
          cd backend/${{ matrix.service }}
          npm run test:unit
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_elearning
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
      
      - name: Run integration tests
        run: |
          cd backend/${{ matrix.service }}
          npm run test:integration
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_elearning
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: backend/${{ matrix.service }}/coverage/lcov.info
          flags: backend-${{ matrix.service }}
          name: backend-${{ matrix.service }}-coverage
  
  test-ai-services:
    name: "AI Services Tests"
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    strategy:
      matrix:
        service: [speech-recognition, nlp-service, translation-service]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'ai-services/${{ matrix.service }}/requirements.txt'
      
      - name: Install dependencies
        run: |
          cd ai-services/${{ matrix.service }}
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Run linting (Black, isort, flake8)
        run: |
          cd ai-services/${{ matrix.service }}
          black --check .
          isort --check-only .
          flake8 .
      
      - name: Run type checking (mypy)
        run: |
          cd ai-services/${{ matrix.service }}
          mypy .
      
      - name: Run unit tests
        run: |
          cd ai-services/${{ matrix.service }}
          pytest tests/unit/ -v --cov=src --cov-report=xml
        env:
          REDIS_URL: redis://localhost:6379
          ENV: test
      
      - name: Run integration tests
        run: |
          cd ai-services/${{ matrix.service }}
          pytest tests/integration/ -v
        env:
          REDIS_URL: redis://localhost:6379
          ENV: test
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ai-services/${{ matrix.service }}/coverage.xml
          flags: ai-${{ matrix.service }}
          name: ai-${{ matrix.service }}-coverage

  test-frontend:
    name: "Frontend Tests"
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/web-app/package-lock.json'
      
      - name: Install dependencies
        run: |
          cd frontend/web-app
          npm ci
      
      - name: Run ESLint
        run: |
          cd frontend/web-app
          npm run lint
      
      - name: Run TypeScript checks
        run: |
          cd frontend/web-app
          npm run type-check
      
      - name: Run unit tests
        run: |
          cd frontend/web-app
          npm run test -- --coverage --watchAll=false
      
      - name: Run accessibility tests
        run: |
          cd frontend/web-app
          npm run test:a11y
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: frontend/web-app/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # =================================================================
  # END-TO-END TESTS
  # =================================================================
  
  e2e-tests:
    name: "E2E Tests"
    runs-on: ubuntu-latest
    needs: [test-backend, test-ai-services, test-frontend]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup test environment
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30  # Wait for services to be ready
      
      - name: Run E2E tests
        run: |
          npm run test:e2e
        env:
          CYPRESS_baseUrl: http://localhost:3100
          CYPRESS_apiUrl: http://localhost:3000
      
      - name: Upload E2E test videos
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: e2e-videos
          path: tests/e2e/videos/
          retention-days: 7
      
      - name: Cleanup test environment
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down -v

  # =================================================================
  # BUILD DOCKER IMAGES
  # =================================================================
  
  build-images:
    name: "Build Docker Images"
    runs-on: ubuntu-latest
    needs: [security-scan, test-backend, test-ai-services, test-frontend]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    strategy:
      matrix:
        include:
          - service: auth-service
            context: backend/auth-service
            dockerfile: backend/auth-service/Dockerfile
          - service: user-service
            context: backend/user-service
            dockerfile: backend/user-service/Dockerfile
          - service: content-service
            context: backend/content-service
            dockerfile: backend/content-service/Dockerfile
          - service: speech-service
            context: ai-services/speech-recognition
            dockerfile: ai-services/speech-recognition/Dockerfile
          - service: nlp-service
            context: ai-services/nlp-service
            dockerfile: ai-services/nlp-service/Dockerfile
          - service: translation-service
            context: ai-services/translation-service
            dockerfile: ai-services/translation-service/Dockerfile
          - service: web-app
            context: frontend/web-app
            dockerfile: frontend/web-app/Dockerfile
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.ECR_REGISTRY }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
      
      - name: Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.ECR_REGISTRY }}/${{ matrix.service }}:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # =================================================================
  # INFRASTRUCTURE DEPLOYMENT
  # =================================================================
  
  deploy-infrastructure:
    name: "Deploy Infrastructure"
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"
      
      - name: Terraform Format Check
        run: |
          cd infrastructure/terraform
          terraform fmt -check
      
      - name: Terraform Init
        run: |
          cd infrastructure/terraform
          terraform init
      
      - name: Terraform Validate
        run: |
          cd infrastructure/terraform
          terraform validate
      
      - name: Terraform Plan
        run: |
          cd infrastructure/terraform
          terraform plan -var-file="environments/production.tfvars" -out=tfplan
      
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: |
          cd infrastructure/terraform
          terraform apply -auto-approve tfplan

  # =================================================================
  # APPLICATION DEPLOYMENT
  # =================================================================
  
  deploy-application:
    name: "Deploy Application"
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
      
      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'
      
      - name: Deploy with Helm
        run: |
          # Update Helm dependencies
          cd infrastructure/helm/elearning-platform
          helm dependency update
          
          # Deploy/upgrade the application
          helm upgrade --install elearning-platform . \
            --namespace elearning-platform \
            --create-namespace \
            --values values.production.yaml \
            --set image.tag=${{ github.sha }} \
            --set global.environment=production \
            --wait --timeout=15m
      
      - name: Verify deployment
        run: |
          kubectl get pods -n elearning-platform
          kubectl get services -n elearning-platform
          kubectl get ingress -n elearning-platform
      
      - name: Run smoke tests
        run: |
          # Wait for deployment to be ready
          kubectl wait --for=condition=available --timeout=300s deployment/auth-service -n elearning-platform
          kubectl wait --for=condition=available --timeout=300s deployment/user-service -n elearning-platform
          kubectl wait --for=condition=available --timeout=300s deployment/content-service -n elearning-platform
          kubectl wait --for=condition=available --timeout=300s deployment/speech-service -n elearning-platform
          kubectl wait --for=condition=available --timeout=300s deployment/nlp-service -n elearning-platform
          kubectl wait --for=condition=available --timeout=300s deployment/web-app -n elearning-platform
          
          # Run smoke tests
          npm run test:smoke

  # =================================================================
  # MONITORING SETUP
  # =================================================================
  
  setup-monitoring:
    name: "Setup Monitoring"
    runs-on: ubuntu-latest
    needs: [deploy-application]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
      
      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'
      
      - name: Deploy Prometheus Stack
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          
          helm upgrade --install prometheus prometheus-community/kube-prometheus-stack \
            --namespace monitoring \
            --create-namespace \
            --values infrastructure/helm/monitoring/prometheus-values.yaml \
            --wait
      
      - name: Deploy Jaeger
        run: |
          helm repo add jaegertracing https://jaegertracing.github.io/helm-charts
          helm repo update
          
          helm upgrade --install jaeger jaegertracing/jaeger \
            --namespace tracing \
            --create-namespace \
            --values infrastructure/helm/monitoring/jaeger-values.yaml \
            --wait
      
      - name: Configure CloudWatch integration
        run: |
          kubectl apply -f infrastructure/k8s/monitoring/cloudwatch-agent.yaml

  # =================================================================
  # NOTIFICATION
  # =================================================================
  
  notify-deployment:
    name: "Notify Deployment"
    runs-on: ubuntu-latest
    needs: [setup-monitoring]
    if: always() && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      
      - name: Notify Microsoft Teams
        if: failure()
        uses: skitionek/notify-microsoft-teams@master
        with:
          webhook_url: ${{ secrets.TEAMS_WEBHOOK }}
          needs: ${{ toJson(needs) }}
          job: ${{ toJson(job) }}
          steps: ${{ toJson(steps) }}

# =================================================================
# WORKFLOW CONFIGURATION
# =================================================================

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash