# =================================================================
# AI-POWERED ELEARNING PLATFORM - DOCKER COMPOSE
# Development environment with all services
# =================================================================

version: '3.8'

# =================================================================
# NETWORKS
# =================================================================
networks:
  elearning-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =================================================================
# VOLUMES
# =================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ai_models_cache:
    driver: local
  content_uploads:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local

# =================================================================
# SERVICES
# =================================================================
services:

  # =================================================================
  # DATABASE SERVICES
  # =================================================================
  
  postgres:
    image: postgres:15-alpine
    container_name: elearning_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: elearning_platform
      POSTGRES_USER: elearning_user
      POSTGRES_PASSWORD: dev_password_123
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - elearning-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U elearning_user -d elearning_platform"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  redis:
    image: redis:7-alpine
    container_name: elearning_redis
    restart: unless-stopped
    command: redis-server --requirepass dev_redis_123 --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - elearning-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =================================================================
  # BACKEND SERVICES
  # =================================================================

  auth-service:
    build:
      context: ./backend/auth-service
      dockerfile: Dockerfile
      target: development
    container_name: elearning_auth_service
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://elearning_user:dev_password_123@postgres:5432/elearning_platform
      REDIS_URL: redis://:dev_redis_123@redis:6379
      JWT_SECRET: dev-jwt-secret-key-change-in-production
      PORT: 3001
    ports:
      - "3001:3001"
    volumes:
      - ./backend/auth-service:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - elearning-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  user-service:
    build:
      context: ./backend/user-service
      dockerfile: Dockerfile
      target: development
    container_name: elearning_user_service
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://elearning_user:dev_password_123@postgres:5432/elearning_platform
      REDIS_URL: redis://:dev_redis_123@redis:6379
      AUTH_SERVICE_URL: http://auth-service:3001
      PORT: 3002
    ports:
      - "3002:3002"
    volumes:
      - ./backend/user-service:/app
      - /app/node_modules
    depends_on:
      auth-service:
        condition: service_healthy
    networks:
      - elearning-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  content-service:
    build:
      context: ./backend/content-service
      dockerfile: Dockerfile
      target: development
    container_name: elearning_content_service
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://elearning_user:dev_password_123@postgres:5432/elearning_platform
      REDIS_URL: redis://:dev_redis_123@redis:6379
      AUTH_SERVICE_URL: http://auth-service:3001
      PORT: 3003
    ports:
      - "3003:3003"
    volumes:
      - ./backend/content-service:/app
      - /app/node_modules
      - content_uploads:/app/uploads
    depends_on:
      auth-service:
        condition: service_healthy
    networks:
      - elearning-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =================================================================
  # AI/ML SERVICES
  # =================================================================

  speech-service:
    build:
      context: ./ai-services/speech-recognition
      dockerfile: Dockerfile
      target: development
    container_name: elearning_speech_service
    restart: unless-stopped
    environment:
      ENV: development
      REDIS_URL: redis://:dev_redis_123@redis:6379
      MODEL_CACHE_DIR: /app/models_cache
      PORT: 8001
      HOST: 0.0.0.0
    ports:
      - "8001:8001"
    volumes:
      - ./ai-services/speech-recognition:/app
      - ai_models_cache:/app/models_cache
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - elearning-network
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s

  nlp-service:
    build:
      context: ./ai-services/nlp-service
      dockerfile: Dockerfile
      target: development
    container_name: elearning_nlp_service
    restart: unless-stopped
    environment:
      ENV: development
      REDIS_URL: redis://:dev_redis_123@redis:6379
      MODEL_CACHE_DIR: /app/models_cache
      PORT: 8002
      HOST: 0.0.0.0
    ports:
      - "8002:8002"
    volumes:
      - ./ai-services/nlp-service:/app
      - ai_models_cache:/app/models_cache
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - elearning-network
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s

  translation-service:
    build:
      context: ./ai-services/translation-service
      dockerfile: Dockerfile
      target: development
    container_name: elearning_translation_service
    restart: unless-stopped
    environment:
      ENV: development
      REDIS_URL: redis://:dev_redis_123@redis:6379
      MODEL_CACHE_DIR: /app/models_cache
      PORT: 8003
      HOST: 0.0.0.0
    ports:
      - "8003:8003"
    volumes:
      - ./ai-services/translation-service:/app
      - ai_models_cache:/app/models_cache
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - elearning-network
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s

  # =================================================================
  # FRONTEND SERVICES
  # =================================================================

  web-app:
    build:
      context: ./frontend/web-app
      dockerfile: Dockerfile
      target: development
    container_name: elearning_web_app
    restart: unless-stopped
    environment:
      NODE_ENV: development
      REACT_APP_API_URL: http://localhost:3000
      REACT_APP_AUTH_SERVICE_URL: http://localhost:3001
      REACT_APP_SPEECH_SERVICE_URL: http://localhost:8001
      REACT_APP_NLP_SERVICE_URL: http://localhost:8002
      REACT_APP_TRANSLATION_SERVICE_URL: http://localhost:8003
      WDS_SOCKET_PORT: 0
    ports:
      - "3100:3100"
    volumes:
      - ./frontend/web-app:/app
      - /app/node_modules
    networks:
      - elearning-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3100"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =================================================================
  # API GATEWAY
  # =================================================================

  api-gateway:
    image: nginx:alpine
    container_name: elearning_api_gateway
    restart: unless-stopped
    ports:
      - "3000:80"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - auth-service
      - user-service
      - content-service
      - speech-service
      - nlp-service
      - translation-service
    networks:
      - elearning-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =================================================================
  # MONITORING SERVICES
  # =================================================================

  prometheus:
    image: prom/prometheus:latest
    container_name: elearning_prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - elearning-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    container_name: elearning_grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - elearning-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: elearning_jaeger
    restart: unless-stopped
    environment:
      COLLECTOR_OTLP_ENABLED: true
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
    networks:
      - elearning-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:14269/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =================================================================
  # DEVELOPMENT TOOLS
  # =================================================================

  mailhog:
    image: mailhog/mailhog:latest
    container_name: elearning_mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web interface
    networks:
      - elearning-network

  adminer:
    image: adminer:latest
    container_name: elearning_adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - elearning-network

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: elearning_redis_commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379:0:dev_redis_123
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - elearning-network

# =================================================================
# DEVELOPMENT OVERRIDES
# =================================================================

# To use this compose file for development:
# docker-compose up -d
#
# To include additional services for testing:
# docker-compose -f docker-compose.yml -f docker-compose.test.yml up -d
#
# To run in production mode:
# docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d